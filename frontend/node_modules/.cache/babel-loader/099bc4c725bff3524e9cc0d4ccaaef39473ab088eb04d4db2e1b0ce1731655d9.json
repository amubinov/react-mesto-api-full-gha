{"ast":null,"code":"export var BASE_URL='http://localhost:3000';// export const BASE_URL = \"https://api.shishkinovich.nomoredomains.work\";\nvar checkResponse=function checkResponse(response){return response.ok?response.json():Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \".concat(response.status));};export var register=function register(email,password){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',credentials:'include',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({email:email,password:password})}).then(checkResponse);};export var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',//записываются в приложение куки\ncredentials:'include',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password}),sameSite:'none'}).then(checkResponse);};export var checkToken=function checkToken(){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',credentials:'include',headers:{// 'Accept': 'application/json',\n'Content-Type':'application/json'}}).then(checkResponse);};","map":{"version":3,"names":["BASE_URL","checkResponse","response","ok","json","Promise","reject","concat","status","register","email","password","fetch","method","credentials","headers","body","JSON","stringify","then","authorize","sameSite","checkToken"],"sources":["C:/Users/User/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'http://localhost:3000';\r\n// export const BASE_URL = \"https://api.shishkinovich.nomoredomains.work\";\r\n\r\n\r\nconst checkResponse = (response) =>\r\n  response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`);\r\n\r\n\r\nexport const register = (email, password) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  }).then(checkResponse);\r\n};\r\n\r\nexport const authorize = (email, password) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: 'POST',\r\n    //записываются в приложение куки\r\n    credentials: 'include',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n    sameSite: 'none',\r\n  })\r\n    .then(checkResponse)\r\n\r\n};\r\n\r\nexport const checkToken = () => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    headers: {\r\n      // 'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then(checkResponse);\r\n};\r\n"],"mappings":"AAAA,MAAO,IAAM,CAAAA,QAAQ,CAAG,uBAAuB,CAC/C;AAGA,GAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIC,QAAQ,QAC7B,CAAAA,QAAQ,CAACC,EAAE,CAAGD,QAAQ,CAACE,IAAI,EAAE,CAAGC,OAAO,CAACC,MAAM,yCAAAC,MAAA,CAAWL,QAAQ,CAACM,MAAM,EAAG,GAG7E,MAAO,IAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,KAAK,CAAEC,QAAQ,CAAK,CAC3C,MAAO,CAAAC,KAAK,IAAAL,MAAA,CAAIP,QAAQ,YAAW,CACjCa,MAAM,CAAE,MAAM,CACdC,WAAW,CAAE,SAAS,CACtBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACZ,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAALA,KAAK,CAAEC,QAAQ,CAARA,QAAS,CAAC,CAC1C,CAAC,CAAC,CAACQ,IAAI,CAAClB,aAAa,CAAC,CACxB,CAAC,CAED,MAAO,IAAM,CAAAmB,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIV,KAAK,CAAEC,QAAQ,CAAK,CAC5C,MAAO,CAAAC,KAAK,IAAAL,MAAA,CAAIP,QAAQ,YAAW,CACjCa,MAAM,CAAE,MAAM,CACd;AACAC,WAAW,CAAE,SAAS,CACtBC,OAAO,CAAE,CACP,QAAQ,CAAE,kBAAkB,CAC5B,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAER,KAAK,CAALA,KAAK,CAAEC,QAAQ,CAARA,QAAS,CAAC,CAAC,CACzCU,QAAQ,CAAE,MACZ,CAAC,CAAC,CACCF,IAAI,CAAClB,aAAa,CAAC,CAExB,CAAC,CAED,MAAO,IAAM,CAAAqB,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAA,CAAS,CAC9B,MAAO,CAAAV,KAAK,IAAAL,MAAA,CAAIP,QAAQ,cAAa,CACnCa,MAAM,CAAE,KAAK,CACbC,WAAW,CAAE,SAAS,CACtBC,OAAO,CAAE,CACP;AACA,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAACI,IAAI,CAAClB,aAAa,CAAC,CACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}