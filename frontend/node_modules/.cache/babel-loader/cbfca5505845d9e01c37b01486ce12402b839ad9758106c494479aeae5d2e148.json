{"ast":null,"code":"// export const BASE_URL = 'http://localhost:3000';\n// export const BASE_URL = 'http://localhost:3000';\nexport const BASE_URL = \"http://api.shishkinovich.nomoredomains.work\";\nfunction getServerReply(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(getServerReply);\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    //записываются в приложение куки\n    credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    sameSite: 'none'\n  }).then(getServerReply);\n};\nexport const checkToken = () => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      // 'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(getServerReply);\n};","map":{"version":3,"names":["BASE_URL","getServerReply","res","ok","json","Promise","reject","status","register","email","password","fetch","method","credentials","headers","body","JSON","stringify","then","login","sameSite","checkToken"],"sources":["C:/Users/User/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["// export const BASE_URL = 'http://localhost:3000';\r\n// export const BASE_URL = 'http://localhost:3000';\r\nexport const BASE_URL = \"http://api.shishkinovich.nomoredomains.work\";\r\n\r\n\r\nfunction getServerReply(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n}\r\n\r\n\r\nexport const register = (email, password) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: 'POST',\r\n    credentials: 'include',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  }).then(getServerReply);\r\n};\r\n\r\nexport const login = (email, password) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: 'POST',\r\n    //записываются в приложение куки\r\n    credentials: 'include',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n    sameSite: 'none',\r\n  })\r\n    .then(getServerReply)\r\n\r\n};\r\n\r\nexport const checkToken = () => {\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: 'GET',\r\n    credentials: 'include',\r\n    headers: {\r\n      // 'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n  }).then(getServerReply);\r\n};\r\n"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG,6CAA6C;AAGrE,SAASC,cAAcA,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;AAChD;AAGA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACZ,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACQ,IAAI,CAACjB,cAAc,CAAC;AACzB,CAAC;AAED,OAAO,MAAMkB,KAAK,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EACxC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACd;IACAC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzCU,QAAQ,EAAE;EACZ,CAAC,CAAC,CACCF,IAAI,CAACjB,cAAc,CAAC;AAEzB,CAAC;AAED,OAAO,MAAMoB,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAOV,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACP;MACA,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CAACI,IAAI,CAACjB,cAAc,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}