{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nfunction getServerReply(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(getServerReply);\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(getServerReply).then(data => {\n    if (data.token) {\n      localStorage.setItem(\"jwt\", data.token);\n      return data;\n    }\n  });\n};\nexport const checkToken = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      'Content-Type': \"application/json\",\n      'Authorization': `Bearer ${jwt}`\n    }\n  }).then(getServerReply);\n};","map":{"version":3,"names":["BASE_URL","getServerReply","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","login","data","token","localStorage","setItem","checkToken","jwt"],"sources":["C:/Users/User/react-mesto-api-full-gha/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nfunction getServerReply(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    })\n    .then(getServerReply)\n}\n\nexport const login = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n    })\n      .then(getServerReply)\n      .then((data) => {\n        if (data.token) {\n          localStorage.setItem(\"jwt\", data.token);\n          return data;\n        }\n      })  \n  };\n\n  export const checkToken = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': \"application/json\",\n        'Authorization': `Bearer ${jwt}`,\n      },\n    })\n      .then(getServerReply)\n  };"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,SAASC,cAAcA,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;AAChD;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBR,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC,CACDQ,IAAI,CAACjB,cAAc,CAAC;AACzB,CAAC;AAED,OAAO,MAAMkB,KAAK,GAAGA,CAACV,KAAK,EAAEC,QAAQ,KAAK;EACtC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBR,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;EACH,CAAC,CAAC,CACCQ,IAAI,CAACjB,cAAc,CAAC,CACpBiB,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACC,KAAK,CAAC;MACvC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMI,UAAU,GAAIC,GAAG,IAAK;EACjC,OAAOd,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASY,GAAI;IACjC;EACF,CAAC,CAAC,CACCP,IAAI,CAACjB,cAAc,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}